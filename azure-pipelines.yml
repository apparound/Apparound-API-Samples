trigger:
   branches:
      include:
         - dev
         - main
         - landing

pool:
   name: DOCKER

variables:
   - name: HomeDirectory
     value: /home/tfsgenericuser
   # LEAVE EMPTY
   - name: ArtifactName
     value:
   - name: WidgetName
     # ALWAYS LOWERCASE
     value: headless

steps:
   - powershell: |
        $GitCommit = "$(Build.SourceVersion)" -replace "^(\w{8}).*", '$1'
        $widgetVersion = (Get-Content ".\version.json") | ConvertFrom-Json
        $ApparoundReleaseName = (""+$widgetVersion.major+"."+$widgetVersion.minor+"."+$widgetVersion.patch)
        $NewBuildName = "$(Build.SourceBranchName)_$GitCommit"+"_$(Build.BuildId)_$ApparoundReleaseName"
        Write-Host ("##vso[build.updatebuildnumber]$NewBuildName")
        $ArtifactName = ("$(WidgetName)_$(Build.SourceBranchName)_$GitCommit.$(Build.BuildId)_$ApparoundReleaseName")
        Write-Host "ArtifactName: $ArtifactName"
        Write-Host ("##vso[task.setvariable variable=ArtifactName;]$ArtifactName");
     displayName: 'Update Build Number'

   - powershell: |
        Copy-Item $(HomeDirectory)\.npmrc-docker  $(System.DefaultWorkingDirectory)\.npmrc
     displayName: 'Recover npm access'
   - task: Docker@0
     displayName: 'Build artifact'
     inputs:
        containerregistrytype: 'Container Registry'
        action: 'Run a Docker command'
        customCommand: 'build -t $(WidgetName):$(Build.SourceBranchName) -f Dockerfile $(System.DefaultWorkingDirectory)'
   - task: Docker@0
     displayName: 'Run artifact image'
     inputs:
        containerregistrytype: 'Container Registry'
        action: 'Run a Docker command'
        customCommand: 'run --rm -d --name $(WidgetName)-$(Build.BuildId) $(WidgetName):$(Build.SourceBranchName)'
   - task: Docker@2
     displayName: 'Copy build outside container'
     inputs:
        command: 'cp'
        arguments: '$(WidgetName)-$(Build.BuildId):/docker/application/release/widget.zip $(Build.SourcesDirectory)/$(ArtifactName).zip'
        addPipelineData: false
   - task: Docker@2
     displayName: 'Stop docker container'
     inputs:
        command: stop
        addPipelineData: false
        container: '$(WidgetName)-$(Build.BuildId)'
     condition: always()
   - task: PublishBuildArtifacts@1
     displayName: 'Publish Artifact'
     inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/$(ArtifactName).zip'
        ArtifactName: '$(WidgetName)'
